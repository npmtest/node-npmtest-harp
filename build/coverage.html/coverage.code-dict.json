{"/home/travis/build/npmtest/node-npmtest-harp/test.js":"/* istanbul instrument in package npmtest_harp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-harp/lib.npmtest_harp.js":"/* istanbul instrument in package npmtest_harp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_harp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_harp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-harp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-harp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_harp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_harp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_harp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_harp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_harp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_harp.__dirname + '/lib.npmtest_harp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-harp/node_modules/harp/lib/index.js":"var path        = require('path')\nvar fs          = require('fs-extra')\nvar terraform   = require('terraform')\nvar async       = require('async')\nvar connect     = require('connect')\nvar mime        = require('mime')\nvar helpers     = require('./helpers')\nvar middleware  = require('./middleware')\nvar pkg         = require('../package.json')\n\n\n/**\n * Server\n *\n * Host a single Harp application.\n *\n */\n\nexports.server = function(dirPath, options, callback){\n  var app = connect()\n  app.use(middleware.regProjectFinder(dirPath))\n  app.use(middleware.setup)\n  app.use(middleware.basicAuth)\n  app.use(middleware.underscore)\n  app.use(middleware.mwl)\n  app.use(middleware.static)\n  app.use(middleware.poly)\n  app.use(middleware.process)\n  app.use(middleware.fallback)\n\n  return app.listen(options.port || 9966, options.ip, function(){\n    app.projectPath = dirPath\n    callback.apply(app, arguments)\n  })\n}\n\n\n/**\n * Multihost\n *\n * Host multiple Harp applications.\n *\n */\n\nexports.multihost = function(dirPath, options, callback){\n  var app = connect()\n  app.use(middleware.notMultihostURL)\n  app.use(middleware.index(dirPath))\n  app.use(middleware.hostProjectFinder(dirPath))\n  app.use(middleware.setup)\n  app.use(middleware.basicAuth)\n  app.use(middleware.underscore)\n  app.use(middleware.mwl)\n  app.use(middleware.static)\n  app.use(middleware.poly)\n  app.use(middleware.process)\n  app.use(middleware.fallback)\n  app.listen(options.port || 9000, callback)\n}\n\n/**\n * Mount\n *\n * Offer the asset pipeline as connect middleware\n *\n */\n\nexports.mount = function(mountPoint, root){\n\n  if(!root){\n    root = mountPoint\n    mountPoint = null\n  }else{\n    var rx = new RegExp(\"^\" + mountPoint)\n  }\n\n  var finder = middleware.regProjectFinder(root)\n\n  return function(req, rsp, next){\n\n    if(rx){\n      if(!req.url.match(rx)) return next()\n      var originalUrl = req.url\n      req.url         = req.url.replace(rx, \"/\")\n    }\n\n    finder(req, rsp, function(){\n      middleware.setup(req, rsp, function(){\n        middleware.static(req, rsp, function(){\n          middleware.poly(req, rsp, function(){\n            middleware.process(req, rsp, function(){\n              if(originalUrl) req.url = originalUrl\n              next()\n            })\n          })\n        })\n      })\n    })\n  }\n}\n\n\n/**\n * Pipeline\n *\n * Offer the asset pipeline as connect middleware\n *\n */\n\nexports.pipeline = function(root){\n  console.log(\"Deprecated, please use MOUNT instead, this will be removed in a future version.\");\n  var publicPath = path.resolve(root)\n  var terra = terraform.root(publicPath)\n\n  return function(req, rsp, next){\n    var normalizedPath  = helpers.normalizeUrl(req.url)\n    var priorityList    = terraform.helpers.buildPriorityList(normalizedPath)\n    var sourceFile      = terraform.helpers.findFirstFile(publicPath, priorityList)\n\n    if(!sourceFile) return next()\n\n    terra.render(sourceFile, function(error, body){\n      if(error) return next(error)\n      if(!body) return next() // 404\n\n      var outputType = terraform.helpers.outputType(sourceFile)\n      var mimeType   = helpers.mimeType(outputType)\n      var charset    = mime.charsets.lookup(mimeType)\n      rsp.statusCode = 200\n      rsp.setHeader('Content-Type', mimeType + (charset ? '; charset=' + charset : ''))\n      rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n      rsp.end(body)\n    })\n\n  }\n\n}\n\nexports.pkg = pkg\n\n/**\n * Export middleware\n *\n * Make sure middleware is accessible\n * when using harp as a library\n *\n */\nexports.middleware = middleware;\n\n/**\n * Compile\n *\n * Compiles Single Harp Application.\n *\n */\n\nexports.compile = function(projectPath, outputPath, callback){\n\n  /**\n   * Both projectPath and outputPath are optional\n   */\n\n  if(!callback){\n    callback   = outputPath\n    outputPath = \"www\"\n  }\n\n  if(!outputPath){\n    outputPath = \"www\"\n  }\n\n\n  /**\n   * Setup all the paths and collect all the data\n   */\n\n  try{\n    outputPath = path.resolve(projectPath, outputPath)\n    var setup  = helpers.setup(projectPath, \"production\")\n    var terra   = terraform.root(setup.publicPath, setup.config.globals)\n  }catch(err){\n    return callback(err)\n  }\n\n\n  /**\n   * Protect the user (as much as possible) from compiling up the tree\n   * resulting in the project deleting its own source code.\n   */\n\n  if(!helpers.willAllow(projectPath, outputPath)){\n    return callback({\n      type: \"Invalid Output Path\",\n      message: \"Output path cannot be greater then one level up from project path and must be in directory starting with `_` (underscore).\",\n      projectPath: projectPath,\n      outputPath: outputPath\n    })\n  }\n\n\n  /**\n   * Compile and save file\n   */\n\n  var compileFile = function(file, done){\n    process.nextTick(function () {\n      terra.render(file, function(error, body){\n        if(error){\n          done(error)\n        }else{\n          if(body){\n            var dest = path.resolve(outputPath, terraform.helpers.outputPath(file))\n            fs.mkdirp(path.dirname(dest), function(err){\n              fs.writeFile(dest, body, done)\n            })\n          }else{\n            done()\n          }\n        }\n      })\n    })\n  }\n\n\n  /**\n   * Copy File\n   *\n   * TODO: reference ignore extensions from a terraform helper.\n   */\n  var copyFile = function(file, done){\n    var ext = path.extname(file)\n    if(!terraform.helpers.shouldIgnore(file) && [\".jade\", \".ejs\", \".md\", \".styl\", \".less\", \".scss\", \".sass\", \".coffee\"].indexOf(ext) === -1){\n      var localPath = path.resolve(outputPath, file)\n      fs.mkdirp(path.dirname(localPath), function(err){\n        fs.copy(path.resolve(setup.publicPath, file), localPath, done)\n      })\n    }else{\n      done()\n    }\n  }\n\n  /**\n   * Scan dir, Compile Less and Jade, Copy the others\n   */\n\n  helpers.prime(outputPath, { ignore: projectPath }, function(err){\n    if(err) console.log(err)\n\n    helpers.ls(setup.publicPath, function(err, results){\n      async.each(results, compileFile, function(err){\n        if(err){\n          callback(err)\n        }else{\n          async.each(results, copyFile, function(err){\n            setup.config['harp_version'] = pkg.version\n            delete setup.config.globals\n            callback(null, setup.config)\n          })\n        }\n      })\n    })\n  })\n\n}\n","/home/travis/build/npmtest/node-npmtest-harp/node_modules/harp-minify/lib/index.js":"\nvar sqwish = require('sqwish');\nvar detect = require('language-classifier');\nvar html = require('html-minifier');\nvar uglify = require('uglify-js');\n\n/**\n * Minify a `string` of an unknown language.\n *\n * @param {String} string\n * @param {Object} opts\n * @return {String}\n */\n\nmodule.exports = exports = function minify (string, opts) {\n  var lang = detect(string);\n  var fn = exports[lang];\n  if (!fn) throw new Error('Unsupported language: ' + lang);\n  return fn(string, opts);\n};\n\n/**\n * Minify a Javascript `string` with optional `opts`.\n *\n * @param {String} string\n * @param {Object} opts\n * @return {String}\n */\n\nexports.js =\nexports.javascript = function (string, opts) {\n  opts = opts || {};\n  opts.fromString = true;\n  return uglify.minify(string, opts).code;\n};\n\n/**\n * Minify a CSS `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nexports.css = function (string) {\n  return sqwish.minify(string);\n};\n\n/**\n * Minify an HTML `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nexports.html = function (string) {\n  return html.minify(string);\n};\n","/home/travis/build/npmtest/node-npmtest-harp/node_modules/harp/lib/helpers.js":"var fs      = require('fs')\nvar path    = require('path')\nvar mime    = require('mime')\nvar terraform = require('terraform')\nvar fse     = require('fs-extra')\nvar envy    = require('envy-json')\n\n/**\n *\n * Normalize Url\n *\n * - removes querystring\n * - removes extra slashes\n * - changes `/` to `/index.html`\n */\n\nexports.normalizeUrl = function(url){\n\n  // take off query string\n  var base = unescape(url.split('?')[0])\n\n  /**\n   * Normalize Path\n   *\n   * Note: This converts unix paths to windows path on windows\n   * (not sure if this is a good thing)\n   */\n  var file_path = path.normalize(base)\n\n  // index.html support\n  if (path.sep == file_path[file_path.length - 1]) file_path += 'index.html'\n\n  return file_path\n}\n\n\n/**\n *\n * Mime Type\n *\n * returns type of the file\n *\n * TODO: reference ext from terraform\n */\n\nexports.mimeType = function(source){\n  var ext = path.extname(source)\n\n  if(['.jade', '.md', '.ejs'].indexOf(ext)  !== -1){\n    return mime.lookup('html')\n  }else if(['.less', '.styl', '.scss', '.sass'].indexOf(ext)  !== -1){\n    return mime.lookup('css')\n  } else if (['.js', '.coffee'].indexOf(ext) !== -1) {\n    return mime.lookup('js')\n  } else {\n    return mime.lookup(source)\n  }\n\n}\n\n\n/**\n *\n * Walk directory for files\n *\n * recursive function that returns the directory tree\n * http://stackoverflow.com/questions/5827612/node-js-fs-readdir-recursive-directory-search\n *\n */\n\nvar walk = function(dir, done) {\n  var results = []\n\n  fs.readdir(dir, function(err, list) {\n    if (err){\n      return done(err)\n    }\n    var pending = list.length\n\n    if (!pending) return done(null, results);\n    list.forEach(function(file) {\n      file = path.resolve(dir, file)\n      fs.stat(file, function(err, stat) {\n        if (stat && stat.isDirectory()) {\n          walk(file, function(err, res) {\n            results = results.concat(res)\n            if (!--pending) done(null, results)\n          })\n        } else {\n          results.push(file)\n          if (!--pending) done(null, results)\n        }\n      })\n    })\n  })\n\n}\n\n\n/**\n *\n * Fetch all the file paths for a directory.\n * returns and array of all the relative paths.\n *\n */\n\nexports.ls = function(dir, callback) {\n  walk(dir, function(err, results){\n    var files = []\n    results.map(function(file){ files.push(path.relative(dir, file)) })\n    callback(null, files)\n  })\n}\n\n\n/**\n * Setup\n *\n * This is the style and configuration of a Harp Application.\n * returns object with contents of Harp.json and application style\n *\n *   {\n *     \"projectPath\" : \"/path/to/app\",\n *     \"publicPath\"  : \"/path/to/app/public\",\n *     \"config\"      : { ... }\n *   }\n */\n\nexports.setup = function(projectPath, env){\n  if(!env) env = \"development\"\n\n  try{\n    var configPath  = path.join(projectPath, \"harp.json\")\n    var contents    = fs.readFileSync(configPath).toString()\n    var publicPath  = path.join(projectPath, \"public\")\n  }catch(e){\n    try{\n      var configPath  = path.join(projectPath, \"_harp.json\")\n      var contents    = fs.readFileSync(configPath).toString()\n      var publicPath  = projectPath\n    }catch(e){\n      var contents    = \"{}\"\n      var publicPath  = projectPath\n    }\n  }\n\n  // not sure what this does anymore.\n  if(!contents || contents.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '') == ''){\n    contents = '{}'\n  }\n\n  // attempt to parse the file\n  try{\n    var cfg = JSON.parse(contents)\n  }catch(e){\n    e.source    = \"JSON\"\n    e.dest      = \"CONFIG\"\n    e.message   = e.message\n    e.filename  = configPath\n    e.stack     = contents\n    e.lineno    = -1\n    throw new terraform.helpers.TerraformError(e)\n  }\n\n  if(!cfg.hasOwnProperty('globals')) cfg['globals'] = {}\n\n  cfg.globals.environment = process.env.NODE_ENV || env\n\n  // replace values that look like environment variables\n  // e.g. '$foo' -> process.env.foo\n  cfg = envy(cfg)\n\n  return {\n    projectPath : projectPath,\n    publicPath  : publicPath,\n    config      : cfg\n  }\n\n}\n\n\n/**\n *\n * Template for outputing Less errors.\n *\n */\n\nexports.cssError = function(error){\n  var body = '' +\n\n  'body{' +\n    'margin:0;' +\n  '}' +\n\n  'body:before {' +\n    'display: block;'+\n    'white-space: pre;' +\n    'content: \"'+ error.error.source +' -> ' + error.error.dest + ' (' + error.error.message + ') ' + error.error.filename + '\";'+\n    'color: #444;'+\n    'background-color: #fefe96;' +\n    'padding: 40px 40px;'+\n    'margin: 0;'+\n    'font-family: monospace;'+\n    'font-size: 14px;'+\n  '}'\n\n  return body\n}\n\n\n/**\n *\n * Will Collide\n *\n * Returns true if first path is in the line of fire of the second path.\n * ie: if we delete the second path will the first path be affected?\n */\n\nvar willCollide = exports.willCollide = function(projectPath, outputPath){\n  var projectPath   = path.resolve(projectPath)\n  var outputPath    = path.resolve(outputPath)\n  var relativePath  = path.relative(projectPath, outputPath)\n  var arr           = relativePath.split(path.sep)\n  var result        = true;\n\n  arr.forEach(function(i){\n    if(i !== \"..\") result = false\n  })\n\n  /**\n   * for @kennethormandy ;)\n   */\n  if ([path.sep, \"C:\\\\\"].indexOf(outputPath) !== -1) result = true\n\n  /**\n   * For #400\n   */\n  if (projectPath === outputPath) result = true\n\n  return result\n}\n\n\n/**\n *\n * Will Allow\n *\n * Returns `true` if we feel projectPath is safe from the output path.\n * For this to be the case. The outputPath must live only one directory\n * back from the projectPath and the projectPath must live in a directory\n * starting with an underscore.\n */\n\nexports.willAllow = function(projectPath, outputPath){\n  var projectPath   = path.resolve(projectPath)\n  var outputPath    = path.resolve(outputPath)\n  var relativePath  = path.relative(projectPath, outputPath)\n  var arr           = relativePath.split(path.sep)\n\n  if(willCollide(projectPath, outputPath)){\n    if(relativePath === \"..\"){\n      if(projectPath.split(path.sep)[projectPath.split(path.sep).length - 1][0] == \"_\"){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return false\n    }\n  }else{\n    return true\n  }\n}\n\n\n/**\n * Prime\n * (Disk I/O)\n *\n * Cleans out a directory but ignores one (optionally).\n *\n * primePath: Absolute Path\n * options: Object\n *    ignore: Absolute Path || Relative (to delete)\n *\n * This is a powerful Function so take it seriously.\n *\n */\n\nexports.prime = function(primePath, options, callback){\n\n  if(!callback){\n    callback = options\n    options = {}\n  }\n\n  /**\n   * Options (only one)\n   */\n  var ignorePath = options.ignore\n    ? path.resolve(primePath, options.ignore)\n    : null\n\n  // Absolute paths are predictable.\n  var primePath = path.resolve(primePath)\n\n  fse.mkdirp(primePath, function(){\n    fse.readdir(primePath, function(error, contents){\n\n      /**\n       * Delete each item in the directory in parallel. Thanks Ry!\n       */\n\n      if(contents.length == 0) return callback()\n\n      var total = contents.length\n      var count = 0\n\n\n      contents.forEach(function(i){\n        var filePath  = path.resolve(primePath, i)\n        var gitRegExp = new RegExp(/^.git/)\n\n        /**\n         * We leave `.git`, `.gitignore`, and project path.\n         */\n        if(filePath === ignorePath || i.match(gitRegExp)){\n          count++\n          if(count == total) callback()\n        }else{\n          fse.remove(filePath, function(err){\n            count++\n            if(count == total) callback()\n          })\n        }\n      })\n\n    })\n  })\n\n}\n\n\n/**\n * Stacktrace\n *\n * Formats a stactrace\n *\n *\n * This is a powerful Function so take it seriously.\n *\n */\n\nexports.stacktrace = function(str, options){\n  var lineno  = options.lineno  || -1\n  var context = options.context || 8\n  var context = context = context / 2\n  var lines   = ('\\n' + str).split('\\n')\n  var start   = Math.max(lineno - context, 1)\n  var end     = Math.min(lines.length, lineno + context)\n\n  if(lineno === -1) end = lines.length\n\n  var pad     = end.toString().length\n\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start\n    return (curr == lineno ? ' > ' : '   ')\n      + Array(pad - curr.toString().length + 1).join(' ')\n      + curr\n      + '| '\n      + line\n  }).join('\\n')\n\n  return context\n}\n","/home/travis/build/npmtest/node-npmtest-harp/node_modules/harp/lib/middleware.js":"var path            = require('path')\nvar fs              = require('fs')\nvar helpers         = require('./helpers')\nvar mime            = require('mime')\nvar terraform       = require('terraform')\nvar pkg             = require('../package.json')\nvar skin            = require('./skin')\nvar connect         = require('connect')\nvar send            = require('send')\nvar utilsPause      = require('pause')\nvar utilsEscape     = require('escape-html')\nvar parse           = require('parseurl')\nvar url             = require('url')\n\nexports.notMultihostURL = function(req, rsp, next){\n  var host      = req.headers.host\n  var hostname  = host.split(':')[0]\n  var arr       = hostname.split(\".\")\n  var port      = host.split(':')[1] ? ':' + host.split(':')[1] : ''\n\n  if(hostname == \"127.0.0.1\" || hostname == \"localhost\"){\n    rsp.statusCode = 307\n    rsp.setHeader('Location', 'http://harp.nu' + port)\n    rsp.end(\"redirecting you to http://harp.nu\" + port)\n  }else if(arr.length == 4){\n    arr.pop()\n    arr.push('io')\n    var link = 'http://' + arr.join('.') + port\n    var body = \"Local server does not support history. Perhaps you are looking for <href='\" + link + \"'>\" + link + \"</a>.\"\n    rsp.statusCode = 307\n    rsp.end(body)\n  }else if(arr.length > 4){\n    arr.shift()\n    var link = 'http://' + arr.join('.') + port\n    rsp.statusCode = 307\n    rsp.setHeader('Location', link)\n    rsp.end(\"redirecting you to \" + link)\n  }else{\n    next()\n  }\n}\n\nvar reservedDomains = [\"harp.io\", \"harpdev.io\", \"harpapp.io\"];\nexports.index = function(dirPath){\n  return function(req, rsp, next){\n    var host      = req.headers.host;\n    var hostname  = host.split(':')[0];\n    var arr       = hostname.split(\".\");\n    var port      = host.split(':')[1] ? ':' + host.split(':')[1] : '';\n    var poly      = terraform.root(__dirname + \"/templates\");\n\n    if(arr.length == 2){\n      fs.readdir(dirPath, function(err, files){\n        var projects = [];\n\n        files.forEach(function(file){\n          var local = file.split('.');\n\n          var appPart = local.join(\"_\");\n\n          if (local.length > 2) {\n            var domain = local.slice(Math.max(local.length - 2, 1)).join(\".\");\n            if (reservedDomains.indexOf(domain) != -1) {\n              appPart =  local[0];\n            }\n          }\n\n          // DOT files are ignored.\n          if (file[0] !== \".\") {\n            projects.push({\n              \"name\"      : file,\n              \"localUrl\"  : 'http://' + appPart + \".\" + host,\n              \"localPath\" : path.resolve(dirPath, file)\n            });\n          }\n        });\n\n        poly.render(\"index.jade\", { pkg: pkg, projects: projects, layout: \"_layout.jade\" }, function(error, body){\n          rsp.end(body)\n        });\n      })\n    } else {\n      next();\n    }\n  }\n}\n\nexports.hostProjectFinder = function(dirPath){\n  return function(req, rsp, next){\n    var host        = req.headers.host;\n    var hostname    = host.split(':')[0];\n    var matches     = [];\n\n    fs.readdir(dirPath, function(err, files){\n      var appPart = hostname.split(\".\")[0];\n      files.forEach(function(file){\n        var fp = file.split('.');\n        var filePart;\n        // Check against Reserved Domains first.\n        if (fp.length > 2) {\n          var domain = fp.slice(Math.max(fp.length - 2, 1)).join(\".\");\n          if (reservedDomains.indexOf(domain) != -1) {\n            fp = fp.slice(0, Math.max(fp.length - 2))\n          }\n        }\n\n        filePart = fp.join(\"_\");\n        if (appPart == filePart) {\n          matches.push(file);\n        }\n      });\n\n      if(matches.length > 0){\n        req.projectPath = path.resolve(dirPath, matches[0]);\n        next();\n      } else {\n        rsp.end(\"Cannot find project\")\n      }\n\n    });\n  }\n}\n\nexports.regProjectFinder = function(projectPath){\n  return function(req, rsp, next){\n    req.projectPath = projectPath\n    next()\n  }\n}\n\n/**\n * Fallbacks\n *\n * This is the logic behind rendering fallback files.\n *\n *  1. return static 200.html file\n *  2. compile and return 200.xxx\n *  3. return static 404.html file\n *  4. compile and return 404.xxx file\n *  5. default 404\n *\n * It is broken into two public functions `fallback`, and `notFound`\n *\n */\n\nvar fallback = exports.fallback = function(req, rsp, next){\n  skin(req, rsp, [custom200static, custom200dynamic, notFound], next)\n}\n\nvar notFound = exports.notFound = function(req, rsp, next){\n  skin(req, rsp, [custom404static, custom404dynamic, default404], next)\n}\n\n\n/**\n * Custom 200\n *\n *  1. return static 200.html file\n *  2. compile and return 200.xxx file\n *\n */\n\nvar custom200static = function(req, rsp, next){\n  fs.readFile(path.resolve(req.setup.publicPath, \"200.html\"), function(err, contents){\n    if(contents){\n      var body    = contents.toString()\n      var type    = helpers.mimeType(\"html\")\n      var charset = mime.charsets.lookup(type)\n      rsp.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''))\n      rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n      rsp.statusCode = 200\n      rsp.end(body)\n    }else{\n      next()\n    }\n  })\n}\n\n/**\n * Custom 200 (jade, md, ejs)\n *\n *  1. return static 200.html file\n *  2. compile and return 404.xxx file\n *\n */\n\nvar custom200dynamic = function(req, rsp, next){\n  skin(req, rsp, [poly], function(){\n    var priorityList  = terraform.helpers.buildPriorityList(\"200.html\")\n    var sourceFile    = terraform.helpers.findFirstFile(req.setup.publicPath, priorityList)\n    if(!sourceFile) return next()\n\n    req.poly.render(sourceFile, function(error, body){\n      if(error){\n        // TODO: make this better\n        rsp.statusCode = 404;\n        rsp.end(\"There is an error in your \" + sourceFile + \" file\")\n      }else{\n        if(!body) return next()\n        var type    = helpers.mimeType(\"html\")\n        var charset = mime.charsets.lookup(type)\n        rsp.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));\n        rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n        rsp.statusCode = 200;\n        rsp.end(body)\n      }\n    })\n  })\n}\n\n\n/**\n * Custom 404 (html)\n *\n *  1. return static 404.html file\n *  2. compile and return 404.xxx file\n *\n * TODO: cache readFile IO\n *\n */\n\nvar custom404static = function(req, rsp, next){\n  fs.readFile(path.resolve(req.setup.publicPath, \"404.html\"), function(err, contents){\n    if(contents){\n      var body    = contents.toString()\n      var type    = helpers.mimeType(\"html\")\n      var charset = mime.charsets.lookup(type)\n      rsp.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''))\n      rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n      rsp.statusCode = 404\n      rsp.end(body)\n    }else{\n      next()\n    }\n  })\n}\n\n\n/**\n * Custom 404 (jade, md, ejs)\n *\n *  1. return static 404.html file\n *  2. compile and return 404.xxx file\n *\n */\n\nvar custom404dynamic = function(req, rsp, next){\n  skin(req, rsp, [poly], function(){\n    var priorityList  = terraform.helpers.buildPriorityList(\"404.html\")\n    var sourceFile    = terraform.helpers.findFirstFile(req.setup.publicPath, priorityList)\n    if(!sourceFile) return next()\n\n    req.poly.render(sourceFile, function(error, body){\n      if(error){\n        // TODO: make this better\n        rsp.statusCode = 404;\n        rsp.end(\"There is an error in your \" + sourceFile + \" file\")\n      }else{\n        if(!body) return next()\n        var type    = helpers.mimeType(\"html\")\n        var charset = mime.charsets.lookup(type)\n        rsp.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));\n        rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n        rsp.statusCode = 404;\n        rsp.end(body)\n      }\n    })\n  })\n}\n\n\n/**\n * Default 404\n *\n * No 200 nor 404 files were found.\n *\n */\n\nvar default404 = function(req, rsp, next){\n  var locals = {\n    project: req.headers.host,\n    name: \"Page Not Found\",\n    pkg: pkg\n  }\n  terraform.root(__dirname + \"/templates\").render(\"404.jade\", locals, function(err, body){\n    var type    = helpers.mimeType(\"html\")\n    var charset = mime.charsets.lookup(type)\n    rsp.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));\n    rsp.statusCode = 404\n    rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n    rsp.end(body)\n  })\n}\n\n\n/**\n * Underscore\n *\n * Returns 404 if path contains beginning underscore\n *\n */\nexports.underscore = function(req, rsp, next){\n  if(terraform.helpers.shouldIgnore(req.url)){\n    notFound(req, rsp, next)\n  }else{\n    next()\n  }\n}\n\n/**\n * Modern Web Language\n *\n * Returns 404 if file is a precompiled\n *\n */\nexports.mwl = function(req, rsp, next){\n  var ext = path.extname(req.url).replace(/^\\./, '')\n  req.originalExt = ext\n\n  // This prevents the source files from being served, but also\n  // has to factor in that in this brave new world, sometimes\n  // `.html` (Handlebars, others), `.css` (PostCSS), and\n  // `.js` (Browserify) are actually being used to specify\n  // source files\n\n  //if (['js'].indexOf(ext) === -1) {\n    if (terraform.helpers.processors[\"html\"].indexOf(ext) !== -1 || terraform.helpers.processors[\"css\"].indexOf(ext) !== -1 || terraform.helpers.processors[\"js\"].indexOf(ext) !== -1) {\n      notFound(req, rsp, next)\n    } else {\n      next()\n    }\n  //} else {\n    //next()\n  //}\n}\n\n/**\n * Static\n *\n * Serves up static page (if it exists).\n *\n */\nexports.static = function(req, res, next) {\n  var options  = {}\n  var redirect = true\n\n  if ('GET' != req.method && 'HEAD' != req.method) return next()\n  //if (['js'].indexOf(path.extname(req.url).replace(/^\\./, '')) !== -1) return next()\n\n  var pathn = parse(req).pathname;\n  var pause = utilsPause(req);\n\n  function resume() {\n    next();\n    pause.resume();\n  }\n\n  function directory() {\n\n    if (!redirect) return resume();\n    var pathname = url.parse(req.originalUrl).pathname;\n    res.statusCode = 301;\n    res.setHeader('Location', pathname + '/');\n    res.end('Redirecting to ' + utilsEscape(pathname) + '/');\n  }\n\n  function error(err) {\n    if (404 == err.status){\n      // look for implicit `*.html` if we get a 404\n      return path.extname(err.path) === ''\n        ? serve(pathn + \".html\")\n        : resume()\n    }\n    next(err);\n  }\n\n  var serve = function(pathn){\n    send(req, pathn, {\n        maxage: options.maxAge || 0,\n        root: req.setup.publicPath,\n        hidden: options.hidden\n      })\n      .on('error', error)\n      .on('directory', directory)\n      .pipe(res)\n  }\n  serve(pathn)\n}\n\n/**\n * Opens the (optional) harp.json file and sets the config settings.\n */\n\nexports.setup = function(req, rsp, next){\n  if(req.hasOwnProperty('setup')) return next()\n\n  try{\n    req.setup = helpers.setup(req.projectPath)\n  }catch(error){\n    error.stack = helpers.stacktrace(error.stack, { lineno: error.lineno })\n\n    var locals = {\n      project: req.headers.host,\n      error: error,\n      pkg: pkg\n    }\n\n    return terraform.root(__dirname + \"/templates\").render(\"error.jade\", locals, function(err, body){\n      rsp.statusCode = 500\n      rsp.end(body)\n    })\n  }\n\n  next()\n}\n\n/**\n * Basic Auth\n */\n\nexports.basicAuth = function(req, rsp, next){\n\n  // default empty\n  var creds = []\n\n  // allow array\n  if(req.setup.config.hasOwnProperty(\"basicAuth\") && req.setup.config[\"basicAuth\"] instanceof Array)\n    creds = req.setup.config[\"basicAuth\"]\n\n  // allow string\n  if(req.setup.config.hasOwnProperty(\"basicAuth\") && typeof req.setup.config[\"basicAuth\"] === 'string')\n    creds = [req.setup.config[\"basicAuth\"]]\n\n  // move on if no creds\n  if(creds.length === 0) return next()\n\n  // use connect auth lib iterate over all creds provided\n  connect.basicAuth(function(user, pass){\n    return creds.some(function(cred){\n      return cred === user + \":\" + pass\n    })\n  })(req, rsp, next)\n}\n\n/**\n * Sets up the poly object\n */\n\nvar poly = exports.poly = function(req, rsp, next){\n  if(req.hasOwnProperty(\"poly\")) return next()\n\n  try{\n    req.poly = terraform.root(req.setup.publicPath, req.setup.config.globals)\n  }catch(error){\n    error.stack = helpers.stacktrace(error.stack, { lineno: error.lineno })\n    var locals = {\n      project: req.headers.host,\n      error: error,\n      pkg: pkg\n    }\n    return terraform.root(__dirname + \"/templates\").render(\"error.jade\", locals, function(err, body){\n      rsp.statusCode = 500\n      rsp.end(body)\n    })\n  }\n  next()\n}\n\n\n/**\n * Asset Pipeline\n */\n\nexports.process = function(req, rsp, next){\n  var normalizedPath  = helpers.normalizeUrl(req.url)\n  var priorityList    = terraform.helpers.buildPriorityList(normalizedPath)\n  var sourceFile      = terraform.helpers.findFirstFile(req.setup.publicPath, priorityList)\n\n\n  /**\n   * We GTFO if we don't have a source file.\n   */\n\n  if(!sourceFile){\n    if (path.basename(normalizedPath) === \"index.html\") {\n      var pathAr = normalizedPath.split(path.sep); pathAr.pop() // Pop index.html off the list\n      var prospectCleanPath       = pathAr.join(\"/\")\n      var prospectNormalizedPath  = helpers.normalizeUrl(prospectCleanPath)\n      var prospectPriorityList    = terraform.helpers.buildPriorityList(prospectNormalizedPath)\n      prospectPriorityList.push(path.basename(prospectNormalizedPath + \".html\"))\n\n      sourceFile = terraform.helpers.findFirstFile(req.setup.publicPath, prospectPriorityList)\n\n      if (!sourceFile) {\n        return next()\n      } else {\n        // 301 redirect\n        rsp.statusCode = 301\n        rsp.setHeader('Location', prospectCleanPath)\n        rsp.end('Redirecting to ' + utilsEscape(prospectCleanPath))\n      }\n\n    } else {\n      return next()\n    }\n  } else {\n\n    /**\n     * Now we let terraform handle the asset pipeline.\n     */\n\n    req.poly.render(sourceFile, function(error, body){\n      if(error){\n        error.stack = helpers.stacktrace(error.stack, { lineno: error.lineno })\n\n        var locals = {\n          project: req.headers.host,\n          error: error,\n          pkg: pkg\n        }\n        if(terraform.helpers.outputType(sourceFile) == 'css'){\n          var outputType = terraform.helpers.outputType(sourceFile)\n          var mimeType   = helpers.mimeType(outputType)\n          var charset    = mime.charsets.lookup(mimeType)\n          var body       = helpers.cssError(locals)\n          rsp.statusCode = 200\n          rsp.setHeader('Content-Type', mimeType + (charset ? '; charset=' + charset : ''))\n          rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n          rsp.end(body)\n        }else{\n\n          // Make the paths relative but keep the root dir.\n          // TODO: move to helper.\n          //\n          // var loc = req.projectPath.split(path.sep); loc.pop()\n          // var loc = loc.join(path.sep) + path.sep\n          // if(error.filename) error.filename = error.filename.replace(loc, \"\")\n\n          terraform.root(__dirname + \"/templates\").render(\"error.jade\", locals, function(err, body){\n            var mimeType   = helpers.mimeType('html')\n            var charset    = mime.charsets.lookup(mimeType)\n            rsp.statusCode = 500\n            rsp.setHeader('Content-Type', mimeType + (charset ? '; charset=' + charset : ''))\n            rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n            rsp.end(body)\n          })\n        }\n      }else{\n        // 404\n        if(!body) return next()\n\n        var outputType = terraform.helpers.outputType(sourceFile)\n        var mimeType   = helpers.mimeType(outputType)\n        var charset    = mime.charsets.lookup(mimeType)\n        rsp.statusCode = 200\n        rsp.setHeader('Content-Type', mimeType + (charset ? '; charset=' + charset : ''))\n        rsp.setHeader('Content-Length', Buffer.byteLength(body, charset));\n        rsp.end(body);\n      }\n    })\n  }\n\n\n\n\n\n\n\n\n\n\n}\n","/home/travis/build/npmtest/node-npmtest-harp/node_modules/harp/lib/skin.js":"module.exports = function(req, rsp, stack, callback){\n  var that  = this\n  var index = 0\n\n  function next(err){\n    var layer = stack[index++]\n    if(!layer) return callback(req, rsp, next)\n    layer.call(that, req, rsp, next)\n  }\n\n  next()\n}"}